name: Ephemeral Preview Environment (On Comment)

on:
  pull_request:
    types: [closed]

  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  build_and_deploy_preview:
    name: Build and Deploy Preview
    if: >
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/preview') &&
      contains(fromJson('["OWNER", "COLLABORATOR", "MEMBER"]'), github.author_association)
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Get PR's Head SHA
        id: pr_info
        run: |
          # Usa a CLI do GitHub (gh) para buscar o SHA do último commit do PR
          HEAD_SHA=$(gh pr view ${{ github.event.issue.number }} --json headRefOid -q .headRefOid)
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository at the correct SHA
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_info.outputs.head_sha }}

      - name: Set output slug
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${{ steps.vars.outputs.sha_short }}
          docker build --target php -t devc4rlos/testing-dev-flow:${IMAGE_TAG} .
          docker push devc4rlos/testing-dev-flow:${IMAGE_TAG}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            PR_NUMBER=${{ github.event.issue.number }}
            IMAGE_TAG=${{ steps.vars.outputs.sha_short }}
            COMMIT_SHA=${{ steps.pr_info.outputs.head_sha }}
            PROJECT_DIR="/var/www/previews-prs/testing-dev-flow/pr-${PR_NUMBER}"
            GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"

            export HOSTNAME="testing-dev-flow-pr-${PR_NUMBER}.preview.carlosalexandre.com.br"
            export ROUTER_NAME="testing-dev-flow-pr-${PR_NUMBER}"
            export SERVICE_NAME="testing-dev-flow-pr-${PR_NUMBER}"
            export IMAGE_TAG

            if [ ! -d "$PROJECT_DIR/.git" ]; then
              git clone git@github.com:${{ github.repository }}.git ${PROJECT_DIR}
              cd ${PROJECT_DIR}

              ln -s ~/.env ./.env
              ln -s ~/.htpasswd ./docker/nginx/.htpasswd
            else
              cd ${PROJECT_DIR}
              docker compose -p ${SERVICE_NAME} down -v
            fi

            git fetch origin
            git checkout ${COMMIT_SHA}

            docker compose -f docker-compose.preview.yml -p ${SERVICE_NAME} up -d
            sleep 5
            docker compose -p ${SERVICE_NAME} exec -T app php artisan migrate --force

      - name: Post Preview URL to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ github.event.issue.number }}
          header: preview-url
          message: |
            ✅ **Preview pronto!** (Acionado por comentário)
            Acesse em: https://testing-dev-flow-pr-${{ github.event.issue.number }}.preview.carlosalexandre.com.br

            > Imagem: `devc4rlos/testing-dev-flow:${{ steps.vars.outputs.sha_short }}`


  debug_context:
    name: Debug Comment Context
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment'
    steps:
      - name: Dump GitHub context
        run: |
          echo "Evento: ${{ github.event_name }}"
          echo "É um PR? ${{ !!github.event.issue.pull_request }}"
          echo "Corpo do Comentário: '${{ github.event.comment.body }}'"
          echo "Associação do Autor: ${{ github.author_association }}"

  destroy_preview:
    name: Destroy Preview Environment
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Environment on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            PR_NUMBER=${{ github.event.pull_request.number }}
            PROJECT_DIR="/var/www/previews-prs/testing-dev-flow/pr-${PR_NUMBER}"
            SERVICE_NAME="testing-dev-flow-pr-${PR_NUMBER}"

            if [ -d "$PROJECT_DIR" ]; then
              cd ${PROJECT_DIR}
              docker compose -p ${SERVICE_NAME} down -v
              cd ..
              rm -rf ${PROJECT_DIR}
            fi
            docker image prune -a -f

      - name: Set output slug
        id: vars
        run: echo "sha_short=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Install regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 -o /usr/local/bin/regctl
          chmod +x /usr/local/bin/regctl

      - name: Delete Image Tag from Docker Hub
        run: |
          IMAGE_TAG=${{ steps.vars.outputs.sha_short }}
          regctl registry login docker.io -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
          regctl tag rm docker.io/devc4rlos/testing-dev-flow:${IMAGE_TAG}
